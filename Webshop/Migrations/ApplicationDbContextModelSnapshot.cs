// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Webshop.Data;

namespace Webshop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "5311855d-e63a-4b5f-a003-dc747533181e",
                            ConcurrencyStamp = "ed30944f-5233-4e67-94d9-b1c467dd9d96",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a12b1fd4-2ca5-45d7-a99f-984c574ddab6",
                            ConcurrencyStamp = "a8e2371a-ccd1-4ab9-b3fa-f12e294470d0",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "91ae4ef7-22e1-4c9a-9157-6ce082553e41",
                            RoleId = "5311855d-e63a-4b5f-a003-dc747533181e"
                        },
                        new
                        {
                            UserId = "296c6000-35ba-4241-8a57-7d89c7acddf9",
                            RoleId = "a12b1fd4-2ca5-45d7-a99f-984c574ddab6"
                        },
                        new
                        {
                            UserId = "84829134-dbb3-4548-a832-5c7dd07c3793",
                            RoleId = "a12b1fd4-2ca5-45d7-a99f-984c574ddab6"
                        },
                        new
                        {
                            UserId = "b874b562-3058-4d3c-95c6-55870b7973bb",
                            RoleId = "a12b1fd4-2ca5-45d7-a99f-984c574ddab6"
                        },
                        new
                        {
                            UserId = "40fc262c-767f-4b6f-b9aa-ba08b911b878",
                            RoleId = "a12b1fd4-2ca5-45d7-a99f-984c574ddab6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Webshop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "91ae4ef7-22e1-4c9a-9157-6ce082553e41",
                            AccessFailedCount = 0,
                            Address = "Adminvägen 1",
                            City = "Admin city",
                            ConcurrencyStamp = "1c551551-0d61-47a0-9a07-060369a9a6da",
                            Country = "Admin country",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENF+mGn5x2aNgfGSDeaHtGueElIiB2QW4VfXaMocOiPflvslYqZqLxyLSBdaKn4Jyw==",
                            PhoneNumber = "123456578",
                            PhoneNumberConfirmed = false,
                            PostalCode = "12345",
                            SecurityStamp = "7e5d35da-af27-4a7c-afbe-a08e53bdda78",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "296c6000-35ba-4241-8a57-7d89c7acddf9",
                            AccessFailedCount = 0,
                            Address = "Kanelgatan 3",
                            City = "Visby",
                            ConcurrencyStamp = "76e62cb3-dd93-416e-b57a-1c8173cb01fa",
                            Country = "Sweden",
                            Email = "customer1@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Arne",
                            LastName = "Karat",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER1@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER1@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPSMr5QJDlPdyruaGiG4FKV659V3TL3+5pxeWpih1l5/afrrrJlNBRooB8lSsPYzWQ==",
                            PhoneNumber = "043016624",
                            PhoneNumberConfirmed = false,
                            PostalCode = "23445",
                            SecurityStamp = "1425a7f9-d140-48a1-9035-c036dbc78911",
                            TwoFactorEnabled = false,
                            UserName = "customer1@seeduser.com"
                        },
                        new
                        {
                            Id = "84829134-dbb3-4548-a832-5c7dd07c3793",
                            AccessFailedCount = 0,
                            Address = "Rimbo torg 1",
                            City = "Skövde",
                            ConcurrencyStamp = "bf76b5aa-27d2-4657-a4c0-0d8a87954946",
                            Country = "Sweden",
                            Email = "customer2@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Kenneth",
                            LastName = "Svenzon",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER2@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER2@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN1fVQLFyGfbObvgHWTnjJ10OiTVeRKptEKTtbldetyi9qXUsxuX0MWCtj0M8JAV0A==",
                            PhoneNumber = "0721453456",
                            PhoneNumberConfirmed = false,
                            PostalCode = "44565",
                            SecurityStamp = "c4606722-7045-465a-931e-9f49c9f89c63",
                            TwoFactorEnabled = false,
                            UserName = "customer2@seeduser.com"
                        },
                        new
                        {
                            Id = "b874b562-3058-4d3c-95c6-55870b7973bb",
                            AccessFailedCount = 0,
                            Address = "Kungsgatan 4",
                            City = "Arboga",
                            ConcurrencyStamp = "f2a1092c-106b-4adb-931e-1e1a893e59c8",
                            Country = "Sweden",
                            Email = "customer3@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Angela",
                            LastName = "Melodi",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER3@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER3@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPfSMT3AsbyUZ/8/T1jleBvpWemDKbTmsUEQsP28HSus7azgUiNURlIPwpn6GJ/nKg==",
                            PhoneNumber = "0771242424",
                            PhoneNumberConfirmed = false,
                            PostalCode = "32344",
                            SecurityStamp = "e4c5a146-a5d8-43ed-b8e6-f125be814f2f",
                            TwoFactorEnabled = false,
                            UserName = "customer3@seeduser.com"
                        },
                        new
                        {
                            Id = "40fc262c-767f-4b6f-b9aa-ba08b911b878",
                            AccessFailedCount = 0,
                            Address = "Royal Carnac Hotel 1",
                            City = "Cairo",
                            ConcurrencyStamp = "6ee17bd2-f47c-4a1a-af30-8ac4a482274f",
                            Country = "Egypt",
                            Email = "seeduser@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Kaj",
                            LastName = "Fridell",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER@SEEDUSER.COM",
                            NormalizedUserName = "SEEDUSER@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOjWoaL8UudZ7Dy8etegZOnABjWy06mB0EHofC+qdrB94dTy6bFYR1sVrYLT/0rcQw==",
                            PhoneNumber = "031184698",
                            PhoneNumberConfirmed = false,
                            PostalCode = "33467",
                            SecurityStamp = "de7101cd-8180-4984-a9c6-52d05300ff71",
                            TwoFactorEnabled = false,
                            UserName = "seeduser@seeduser.com"
                        });
                });

            modelBuilder.Entity("Webshop.Models.CartContent", b =>
                {
                    b.Property<int>("CartContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("CartContentId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartContents");
                });

            modelBuilder.Entity("Webshop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            CategoryName = "Chocolate"
                        },
                        new
                        {
                            Id = 102,
                            CategoryName = "Frosted"
                        },
                        new
                        {
                            Id = 103,
                            CategoryName = "Gluten free"
                        },
                        new
                        {
                            Id = 104,
                            CategoryName = "Berries and fruits"
                        });
                });

            modelBuilder.Entity("Webshop.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Kanelgatan 3",
                            City = "Visby",
                            Country = "Sweden",
                            Email = "bling@gmail.com",
                            FirstName = "Arne",
                            LastName = "Karat",
                            PhoneNumber = "043016624",
                            PostalCode = "23445"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Rimbo torg 1",
                            City = "Skövde",
                            Country = "Sweden",
                            Email = "stekarn@gmail.com",
                            FirstName = "Kenneth",
                            LastName = "Svenzon",
                            PhoneNumber = "0721453456",
                            PostalCode = "44565"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kungsgatan 4",
                            City = "Arboga",
                            Country = "Sweden",
                            Email = "lucky@hotmail.com",
                            FirstName = "Angela",
                            LastName = "Melodi",
                            PhoneNumber = "0771242424",
                            PostalCode = "32344"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Royal Carnac Hotel 1",
                            City = "Cairo",
                            Country = "Egypt",
                            Email = "kafr@egypt.gov",
                            FirstName = "Kaj",
                            LastName = "Fridell",
                            PhoneNumber = "031184698",
                            PostalCode = "33467"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Vedgatan 3",
                            City = "Oslo",
                            Country = "Norway",
                            Email = "tavlan@gmail.com",
                            FirstName = "Molly",
                            LastName = "Sundkvist",
                            PhoneNumber = "0443346723",
                            PostalCode = "46723"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Gatgatan 2",
                            City = "Göteborg",
                            Country = "Sweden",
                            Email = "test@gmail.com",
                            FirstName = "Jan",
                            LastName = "Andersson",
                            PhoneNumber = "04422723",
                            PostalCode = "46723"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Avenyn 1",
                            City = "Berlin",
                            Country = "Germany",
                            Email = "raj@goteborg.se",
                            FirstName = "Sofia",
                            LastName = "Bosch",
                            PhoneNumber = "0543768798",
                            PostalCode = "67823"
                        });
                });

            modelBuilder.Entity("Webshop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = "296c6000-35ba-4241-8a57-7d89c7acddf9",
                            OrderDate = new DateTime(2022, 4, 14, 9, 52, 2, 481, DateTimeKind.Local).AddTicks(9769),
                            Paid = true,
                            TotalCost = 87
                        },
                        new
                        {
                            OrderId = 2,
                            CustomerId = "84829134-dbb3-4548-a832-5c7dd07c3793",
                            OrderDate = new DateTime(2022, 4, 14, 9, 52, 2, 484, DateTimeKind.Local).AddTicks(5303),
                            Paid = true,
                            TotalCost = 44
                        },
                        new
                        {
                            OrderId = 3,
                            CustomerId = "84829134-dbb3-4548-a832-5c7dd07c3793",
                            OrderDate = new DateTime(2022, 4, 14, 9, 52, 2, 484, DateTimeKind.Local).AddTicks(5387),
                            Paid = true,
                            TotalCost = 257
                        });
                });

            modelBuilder.Entity("Webshop.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1,
                            OrderId = 1,
                            Price = 29,
                            ProductId = 1001,
                            ProductName = "Chocolate Dream",
                            Quantity = 3
                        },
                        new
                        {
                            OrderDetailId = 2,
                            OrderId = 2,
                            Price = 22,
                            ProductId = 1002,
                            ProductName = "Pink surprise",
                            Quantity = 2
                        },
                        new
                        {
                            OrderDetailId = 3,
                            OrderId = 3,
                            Price = 34,
                            ProductId = 1003,
                            ProductName = "Plain delight",
                            Quantity = 5
                        },
                        new
                        {
                            OrderDetailId = 4,
                            OrderId = 3,
                            Price = 29,
                            ProductId = 1001,
                            ProductName = "Chocolate Dream",
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("Webshop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductImageId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            CategoryId = 101,
                            Description = "A delicious chocolate cupcake with belgian chocolate",
                            Name = "Chocolate Dream",
                            Price = 29,
                            ProductImageId = 1
                        },
                        new
                        {
                            Id = 1002,
                            CategoryId = 102,
                            Description = "A frosted strawberry cupcake, filled with strawberry jam",
                            Name = "Pink surprise",
                            Price = 22
                        },
                        new
                        {
                            Id = 1003,
                            CategoryId = 103,
                            Description = "A gluten free cupcake packed with flavor",
                            Name = "Plain delight",
                            Price = 34
                        },
                        new
                        {
                            Id = 1004,
                            CategoryId = 104,
                            Description = "Filled with peanut butter and topped with delicious peanut frosting.",
                            Name = "Peanut butter cup-cake",
                            Price = 34
                        },
                        new
                        {
                            Id = 1005,
                            CategoryId = 101,
                            Description = "This is the cupcake for you if you like all things Nutella.",
                            Name = "Nutella mountain",
                            Price = 34
                        },
                        new
                        {
                            Id = 1006,
                            CategoryId = 101,
                            Description = "A cupcake made to look like a giant M&M.",
                            Name = "M&M don't sue us",
                            Price = 34
                        },
                        new
                        {
                            Id = 1007,
                            CategoryId = 104,
                            Description = "Not the tea, instead a cupcake with every kind of berry.",
                            Name = "Forest fruit",
                            Price = 34
                        },
                        new
                        {
                            Id = 1008,
                            CategoryId = 101,
                            Description = "Oreo cookie on top as well as batter and frosting made from oreo's.",
                            Name = "Oreo supreme",
                            Price = 34
                        },
                        new
                        {
                            Id = 1009,
                            CategoryId = 104,
                            Description = "If you like something with a fresher taste, this cupcake is for you.",
                            Name = "Lemon",
                            Price = 34
                        },
                        new
                        {
                            Id = 1010,
                            CategoryId = 104,
                            Description = "Every taste of the fruit rainbow you can imagine.",
                            Name = "Taste the rainbow",
                            Price = 34
                        });
                });

            modelBuilder.Entity("Webshop.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Webshop.Models.ProductImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            ImageName = "chokladbild.jpg",
                            ImageThumbName = "chokladbildth.jpg",
                            ImageTitle = "Chocolate Dream"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Webshop.Models.CartContent", b =>
                {
                    b.HasOne("Webshop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Webshop.Models.Customer", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Customer")
                        .HasForeignKey("Webshop.Models.Customer", "CustomerId");
                });

            modelBuilder.Entity("Webshop.Models.Order", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Webshop.Models.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId1");
                });

            modelBuilder.Entity("Webshop.Models.OrderDetail", b =>
                {
                    b.HasOne("Webshop.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webshop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Webshop.Models.Product", b =>
                {
                    b.HasOne("Webshop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Webshop.Models.ProductImage", "ProductImage")
                        .WithMany("Products")
                        .HasForeignKey("ProductImageId");
                });

            modelBuilder.Entity("Webshop.Models.ProductCategory", b =>
                {
                    b.HasOne("Webshop.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webshop.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
