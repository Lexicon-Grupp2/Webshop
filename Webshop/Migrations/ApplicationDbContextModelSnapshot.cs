// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Webshop.Data;

namespace Webshop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1e026298-1349-4df0-a0ab-db3776de2466",
                            ConcurrencyStamp = "32cdf9f1-ebf6-40b3-bf6d-36a2ac597f11",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e1d331a6-be61-4455-937a-8b87c40b27b3",
                            ConcurrencyStamp = "076ada64-74fd-4880-915e-e28ce5b61201",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "6b8967b9-ad31-4615-9c7b-7c61fa98fe18",
                            RoleId = "1e026298-1349-4df0-a0ab-db3776de2466"
                        },
                        new
                        {
                            UserId = "9b4974b6-a7c0-429a-babe-da33b0b597ee",
                            RoleId = "e1d331a6-be61-4455-937a-8b87c40b27b3"
                        },
                        new
                        {
                            UserId = "b1c5efd8-ecbc-484d-bd2b-26ad81690c72",
                            RoleId = "e1d331a6-be61-4455-937a-8b87c40b27b3"
                        },
                        new
                        {
                            UserId = "636ee032-d79b-4d01-9bad-085029abf952",
                            RoleId = "e1d331a6-be61-4455-937a-8b87c40b27b3"
                        },
                        new
                        {
                            UserId = "58de2905-6534-46f6-baf2-bd4732df92b3",
                            RoleId = "e1d331a6-be61-4455-937a-8b87c40b27b3"
                        },
                        new
                        {
                            UserId = "25297ffc-4948-4554-acb4-bacb814e12cd",
                            RoleId = "e1d331a6-be61-4455-937a-8b87c40b27b3"
                        },
                        new
                        {
                            UserId = "829681d9-960f-4357-9643-c37895f51a30",
                            RoleId = "e1d331a6-be61-4455-937a-8b87c40b27b3"
                        },
                        new
                        {
                            UserId = "4c9cb475-463a-48fb-a46c-206336317809",
                            RoleId = "e1d331a6-be61-4455-937a-8b87c40b27b3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Webshop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "6b8967b9-ad31-4615-9c7b-7c61fa98fe18",
                            AccessFailedCount = 0,
                            Address = "Adminvägen 1",
                            City = "Admin city",
                            ConcurrencyStamp = "e660749c-7180-43a8-b351-4c0ae798bc88",
                            Country = "Admin country",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFff51W/c1TVtIFvU0s2wt0GBDIEAF55d9jUF4MfmzXEOcEv2W3VXpU85ijtb9pAuQ==",
                            PhoneNumber = "123456578",
                            PhoneNumberConfirmed = false,
                            PostalCode = "12345",
                            SecurityStamp = "5f77815a-4e54-4da1-832b-35b4f4309169",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "9b4974b6-a7c0-429a-babe-da33b0b597ee",
                            AccessFailedCount = 0,
                            Address = "Kanelgatan 3",
                            City = "Visby",
                            ConcurrencyStamp = "90e656d6-a8f3-47c9-bbeb-00ddf561b62a",
                            Country = "Sweden",
                            Email = "customer1@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Arne",
                            LastName = "Karat",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER1@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER1@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELEtfMjiQl1FMOMG65N/lqHpAQf+TteGw0qTkdlFWXxCqfLKkHAEznDlV+Wx2zhdGg==",
                            PhoneNumber = "043016624",
                            PhoneNumberConfirmed = false,
                            PostalCode = "23445",
                            SecurityStamp = "d59d6648-841a-4023-880a-8572b5ae2ec0",
                            TwoFactorEnabled = false,
                            UserName = "customer1@seeduser.com"
                        },
                        new
                        {
                            Id = "b1c5efd8-ecbc-484d-bd2b-26ad81690c72",
                            AccessFailedCount = 0,
                            Address = "Rimbo torg 1",
                            City = "Skövde",
                            ConcurrencyStamp = "8dbd9e68-fbc3-44e2-addc-d60d820a5094",
                            Country = "Sweden",
                            Email = "customer2@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Kenneth",
                            LastName = "Svenzon",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER2@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER2@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKB8MmuMD3W8q0wPTSBJY4ml5QrLf2sChKnEyc9AKCF+fdDlqnkRgmMF4YYDv4VwYA==",
                            PhoneNumber = "0721453456",
                            PhoneNumberConfirmed = false,
                            PostalCode = "44565",
                            SecurityStamp = "3d22f119-0243-4a3f-a73c-114e5d15b87b",
                            TwoFactorEnabled = false,
                            UserName = "customer2@seeduser.com"
                        },
                        new
                        {
                            Id = "636ee032-d79b-4d01-9bad-085029abf952",
                            AccessFailedCount = 0,
                            Address = "Kungsgatan 4",
                            City = "Arboga",
                            ConcurrencyStamp = "d993dcba-e91d-4c11-a352-4863875f704f",
                            Country = "Sweden",
                            Email = "customer3@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Angela",
                            LastName = "Melodi",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER3@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER3@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEkgUNaPLjSVxMyD6RlJ0S32tkDGs04a2RMnc0C6rJNX3WZzLKrKl8o0srCfRsdpMg==",
                            PhoneNumber = "0771242424",
                            PhoneNumberConfirmed = false,
                            PostalCode = "32344",
                            SecurityStamp = "a729868b-62b2-4525-87f9-d07580f65ce8",
                            TwoFactorEnabled = false,
                            UserName = "customer3@seeduser.com"
                        },
                        new
                        {
                            Id = "58de2905-6534-46f6-baf2-bd4732df92b3",
                            AccessFailedCount = 0,
                            Address = "Royal Carnac Hotel 1",
                            City = "Cairo",
                            ConcurrencyStamp = "d73275cd-74ab-478a-955d-bbb7a53ba6f4",
                            Country = "Egypt",
                            Email = "customer4@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Kaj",
                            LastName = "Fridell",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER4@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER4@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECTQtEE18AX9trLO6Fc1YidW/kSBJyl0e4JrxvyT10TJ2iTym4x17WIsaxCB5D3a8g==",
                            PhoneNumber = "031184698",
                            PhoneNumberConfirmed = false,
                            PostalCode = "33467",
                            SecurityStamp = "e9dec03f-37fe-4c05-b1a3-0302bef0ee20",
                            TwoFactorEnabled = false,
                            UserName = "customer4@seeduser.com"
                        },
                        new
                        {
                            Id = "25297ffc-4948-4554-acb4-bacb814e12cd",
                            AccessFailedCount = 0,
                            Address = "Vedgatan 3",
                            City = "Oslo",
                            ConcurrencyStamp = "51c0accd-77a1-4be5-b05d-5a3da446bd18",
                            Country = "Norway",
                            Email = "customer5@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Molly",
                            LastName = "Sundkvist",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER5@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER5@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMlDoWtVNcOnFFogHa5M/FO6JzmgvAVZQuacetAR170GG9bRYId96GVUdmOdm18l5w==",
                            PhoneNumber = "0443346723",
                            PhoneNumberConfirmed = false,
                            PostalCode = "46723",
                            SecurityStamp = "4e23bede-0709-408a-a479-bfcb9f7e5392",
                            TwoFactorEnabled = false,
                            UserName = "customer5@seeduser.com"
                        },
                        new
                        {
                            Id = "829681d9-960f-4357-9643-c37895f51a30",
                            AccessFailedCount = 0,
                            Address = "Gatgatan 2",
                            City = "Göteborg",
                            ConcurrencyStamp = "6c4b2feb-d1bd-4da7-9af2-8f180a43781f",
                            Country = "Sweden",
                            Email = "customer6@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Jan",
                            LastName = "Andersson",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER6@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER6@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBB4ENNq57PLMuL1DlvMfXyBnHA+gVd7zzPkLdKTg6dEUWlC9FTtToo5a5oi75c2tA==",
                            PhoneNumber = "04422723",
                            PhoneNumberConfirmed = false,
                            PostalCode = "46723",
                            SecurityStamp = "57c82a15-d2be-4a7c-aa4a-6a9defcba9df",
                            TwoFactorEnabled = false,
                            UserName = "customer6@seeduser.com"
                        },
                        new
                        {
                            Id = "4c9cb475-463a-48fb-a46c-206336317809",
                            AccessFailedCount = 0,
                            Address = "Behrenstrasse 2",
                            City = "Berlin",
                            ConcurrencyStamp = "70e518e8-a251-414a-a3fd-3720d37ca328",
                            Country = "Germany",
                            Email = "customer7@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Sofia",
                            LastName = "Bosch",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER7@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER7@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAX4WxA40V9fytbXPXaS3eShvnSLyUGfckdyn/iXKyT6N4andSZx6+okrC9BZR+AnA==",
                            PhoneNumber = "0543768798",
                            PhoneNumberConfirmed = false,
                            PostalCode = "67823",
                            SecurityStamp = "0cc6fdbf-b3a0-45b8-9be9-54e9aaf7e232",
                            TwoFactorEnabled = false,
                            UserName = "customer7@seeduser.com"
                        });
                });

            modelBuilder.Entity("Webshop.Models.CartContent", b =>
                {
                    b.Property<int>("CartContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("CartContentId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartContents");
                });

            modelBuilder.Entity("Webshop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            CategoryName = "Chocolate"
                        },
                        new
                        {
                            Id = 102,
                            CategoryName = "Fruit"
                        },
                        new
                        {
                            Id = 103,
                            CategoryName = "Vegan"
                        },
                        new
                        {
                            Id = 104,
                            CategoryName = "Filler Category 1"
                        },
                        new
                        {
                            Id = 105,
                            CategoryName = "Filler Category 2"
                        },
                        new
                        {
                            Id = 106,
                            CategoryName = "Filler Category 3"
                        });
                });

            modelBuilder.Entity("Webshop.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Kanelgatan 3",
                            City = "Visby",
                            Country = "Sweden",
                            Email = "bling@gmail.com",
                            FirstName = "Arne",
                            LastName = "Karat",
                            PhoneNumber = "043016624",
                            PostalCode = "23445"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Rimbo torg 1",
                            City = "Skövde",
                            Country = "Sweden",
                            Email = "stekarn@gmail.com",
                            FirstName = "Kenneth",
                            LastName = "Svenzon",
                            PhoneNumber = "0721453456",
                            PostalCode = "44565"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kungsgatan 4",
                            City = "Arboga",
                            Country = "Sweden",
                            Email = "lucky@hotmail.com",
                            FirstName = "Angela",
                            LastName = "Melodi",
                            PhoneNumber = "0771242424",
                            PostalCode = "32344"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Royal Carnac Hotel 1",
                            City = "Cairo",
                            Country = "Egypt",
                            Email = "kafr@egypt.gov",
                            FirstName = "Kaj",
                            LastName = "Fridell",
                            PhoneNumber = "031184698",
                            PostalCode = "33467"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Vedgatan 3",
                            City = "Oslo",
                            Country = "Norway",
                            Email = "tavlan@gmail.com",
                            FirstName = "Molly",
                            LastName = "Sundkvist",
                            PhoneNumber = "0443346723",
                            PostalCode = "46723"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Gatgatan 2",
                            City = "Göteborg",
                            Country = "Sweden",
                            Email = "test@gmail.com",
                            FirstName = "Jan",
                            LastName = "Andersson",
                            PhoneNumber = "04422723",
                            PostalCode = "46723"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Avenyn 1",
                            City = "Berlin",
                            Country = "Germany",
                            Email = "raj@goteborg.se",
                            FirstName = "Sofia",
                            LastName = "Bosch",
                            PhoneNumber = "0543768798",
                            PostalCode = "67823"
                        });
                });

            modelBuilder.Entity("Webshop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            CustomerId = "9b4974b6-a7c0-429a-babe-da33b0b597ee",
                            OrderDate = new DateTime(2022, 4, 21, 13, 31, 53, 24, DateTimeKind.Local).AddTicks(8272),
                            Paid = true,
                            TotalCost = 87
                        },
                        new
                        {
                            OrderId = 2,
                            CustomerId = "b1c5efd8-ecbc-484d-bd2b-26ad81690c72",
                            OrderDate = new DateTime(2022, 4, 21, 13, 31, 53, 27, DateTimeKind.Local).AddTicks(2968),
                            Paid = true,
                            TotalCost = 44
                        },
                        new
                        {
                            OrderId = 3,
                            CustomerId = "b1c5efd8-ecbc-484d-bd2b-26ad81690c72",
                            OrderDate = new DateTime(2022, 4, 21, 13, 31, 53, 27, DateTimeKind.Local).AddTicks(3046),
                            Paid = true,
                            TotalCost = 257
                        },
                        new
                        {
                            OrderId = 4,
                            CustomerId = "58de2905-6534-46f6-baf2-bd4732df92b3",
                            OrderDate = new DateTime(2022, 4, 21, 13, 31, 53, 27, DateTimeKind.Local).AddTicks(3051),
                            Paid = true,
                            TotalCost = 255
                        },
                        new
                        {
                            OrderId = 5,
                            CustomerId = "636ee032-d79b-4d01-9bad-085029abf952",
                            OrderDate = new DateTime(2022, 4, 21, 13, 31, 53, 27, DateTimeKind.Local).AddTicks(3056),
                            Paid = true,
                            TotalCost = 255
                        });
                });

            modelBuilder.Entity("Webshop.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1,
                            OrderId = 1,
                            Price = 29,
                            ProductId = 1001,
                            ProductName = "Chocolate Dream",
                            Quantity = 3
                        },
                        new
                        {
                            OrderDetailId = 2,
                            OrderId = 2,
                            Price = 22,
                            ProductId = 1002,
                            ProductName = "Pink surprise",
                            Quantity = 2
                        },
                        new
                        {
                            OrderDetailId = 3,
                            OrderId = 3,
                            Price = 34,
                            ProductId = 1003,
                            ProductName = "Plain delight",
                            Quantity = 5
                        },
                        new
                        {
                            OrderDetailId = 4,
                            OrderId = 3,
                            Price = 29,
                            ProductId = 1001,
                            ProductName = "Chocolate Dream",
                            Quantity = 3
                        },
                        new
                        {
                            OrderDetailId = 5,
                            OrderId = 4,
                            Price = 29,
                            ProductId = 1001,
                            ProductName = "Chocolate Dream",
                            Quantity = 3
                        },
                        new
                        {
                            OrderDetailId = 6,
                            OrderId = 4,
                            Price = 22,
                            ProductId = 1002,
                            ProductName = "Pink surprise",
                            Quantity = 3
                        },
                        new
                        {
                            OrderDetailId = 7,
                            OrderId = 4,
                            Price = 34,
                            ProductId = 1003,
                            ProductName = "Plain delight",
                            Quantity = 3
                        },
                        new
                        {
                            OrderDetailId = 8,
                            OrderId = 5,
                            Price = 29,
                            ProductId = 1001,
                            ProductName = "Chocolate Dream",
                            Quantity = 3
                        },
                        new
                        {
                            OrderDetailId = 9,
                            OrderId = 5,
                            Price = 22,
                            ProductId = 1002,
                            ProductName = "Pink surprise",
                            Quantity = 3
                        },
                        new
                        {
                            OrderDetailId = 10,
                            OrderId = 5,
                            Price = 34,
                            ProductId = 1003,
                            ProductName = "Plain delight",
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("Webshop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductImageId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            CategoryId = 101,
                            Description = "A delicious chocolate cupcake with belgian chocolate",
                            Name = "Chocolate Dream",
                            Price = 29,
                            ProductImageId = 1
                        },
                        new
                        {
                            Id = 1002,
                            CategoryId = 102,
                            Description = "A frosted strawberry cupcake, filled with strawberry jam",
                            Name = "Pink surprise",
                            Price = 22,
                            ProductImageId = 2
                        },
                        new
                        {
                            Id = 1003,
                            CategoryId = 103,
                            Description = "A gluten free cupcake packed with flavor",
                            Name = "Plain delight",
                            Price = 34,
                            ProductImageId = 3
                        },
                        new
                        {
                            Id = 1004,
                            CategoryId = 103,
                            Description = "Filled with peanut butter and topped with delicious peanut frosting.",
                            Name = "Peanut butter cup-cake",
                            Price = 34,
                            ProductImageId = 4
                        },
                        new
                        {
                            Id = 1005,
                            CategoryId = 101,
                            Description = "This is the cupcake for you if you like all things Nutella.",
                            Name = "Nutella mountain",
                            Price = 34,
                            ProductImageId = 5
                        },
                        new
                        {
                            Id = 1006,
                            CategoryId = 101,
                            Description = "A cupcake made to look like a giant M&M.",
                            Name = "M&M don't sue us",
                            Price = 34,
                            ProductImageId = 6
                        },
                        new
                        {
                            Id = 1007,
                            CategoryId = 102,
                            Description = "Not the tea, instead a cupcake with every kind of berry.",
                            Name = "Forest fruit",
                            Price = 34,
                            ProductImageId = 7
                        },
                        new
                        {
                            Id = 1008,
                            CategoryId = 101,
                            Description = "Oreo cookie on top as well as batter and frosting made from oreo's.",
                            Name = "Oreo supreme",
                            Price = 34,
                            ProductImageId = 8
                        },
                        new
                        {
                            Id = 1010,
                            CategoryId = 102,
                            Description = "Every taste of the fruit rainbow you can imagine.",
                            Name = "Taste the rainbow",
                            Price = 34,
                            ProductImageId = 10
                        },
                        new
                        {
                            Id = 1009,
                            CategoryId = 103,
                            Description = "If you like something with a fresher taste, this cupcake is for you.",
                            Name = "Lemon",
                            Price = 34,
                            ProductImageId = 9
                        },
                        new
                        {
                            Id = 1011,
                            CategoryId = 104,
                            Description = "Filler description",
                            Name = "Filler cupcake 1",
                            Price = 11
                        },
                        new
                        {
                            Id = 1012,
                            CategoryId = 104,
                            Description = "Filler description",
                            Name = "Filler cupcake 2",
                            Price = 11
                        },
                        new
                        {
                            Id = 1013,
                            CategoryId = 104,
                            Description = "Filler description",
                            Name = "Filler cupcake 3",
                            Price = 11
                        },
                        new
                        {
                            Id = 1014,
                            CategoryId = 104,
                            Description = "Filler description",
                            Name = "Filler cupcake 4",
                            Price = 11
                        },
                        new
                        {
                            Id = 1015,
                            CategoryId = 105,
                            Description = "Filler description",
                            Name = "Filler cupcake 5",
                            Price = 11
                        },
                        new
                        {
                            Id = 1016,
                            CategoryId = 105,
                            Description = "Filler description",
                            Name = "Filler cupcake 6",
                            Price = 11
                        },
                        new
                        {
                            Id = 1017,
                            CategoryId = 105,
                            Description = "Filler description",
                            Name = "Filler cupcake 7",
                            Price = 11
                        },
                        new
                        {
                            Id = 1018,
                            CategoryId = 105,
                            Description = "Filler description",
                            Name = "Filler cupcake 8",
                            Price = 11
                        },
                        new
                        {
                            Id = 1019,
                            CategoryId = 106,
                            Description = "Filler description",
                            Name = "Filler cupcake 9",
                            Price = 11
                        },
                        new
                        {
                            Id = 1020,
                            CategoryId = 106,
                            Description = "Filler description",
                            Name = "Filler cupcake 10",
                            Price = 11
                        },
                        new
                        {
                            Id = 1021,
                            CategoryId = 106,
                            Description = "Filler description",
                            Name = "Filler cupcake 11",
                            Price = 11
                        },
                        new
                        {
                            Id = 1022,
                            CategoryId = 106,
                            Description = "Filler description",
                            Name = "Filler cupcake 12",
                            Price = 11
                        });
                });

            modelBuilder.Entity("Webshop.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Webshop.Models.ProductImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            ImageName = "cupcake-chocolate.jpg",
                            ImageThumbName = "cupcake-chocolate.jpg",
                            ImageTitle = "Chocolate Dream"
                        },
                        new
                        {
                            ImageId = 2,
                            ImageName = "cupcake-strawberry.jpg",
                            ImageThumbName = "cupcake-strawberry.jpg",
                            ImageTitle = "Pink surprise"
                        },
                        new
                        {
                            ImageId = 3,
                            ImageName = "cupcake-glutenfree.jpg",
                            ImageThumbName = "cupcake-glutenfree.jpg",
                            ImageTitle = "Plain delight"
                        },
                        new
                        {
                            ImageId = 4,
                            ImageName = "cupcake-peanut.jpg",
                            ImageThumbName = "cupcake-peanut.jpg",
                            ImageTitle = "Peanut butter cup-cake"
                        },
                        new
                        {
                            ImageId = 5,
                            ImageName = "cupcake-nutella.jpg",
                            ImageThumbName = "cupcake-nutella.jpg",
                            ImageTitle = "Nutella mountain"
                        },
                        new
                        {
                            ImageId = 6,
                            ImageName = "cupcake-mm.jpg",
                            ImageThumbName = "cupcake-mm.jpg",
                            ImageTitle = "M&M don't sue us"
                        },
                        new
                        {
                            ImageId = 7,
                            ImageName = "cupcake-forest.jpg",
                            ImageThumbName = "cupcake-forest.jpg",
                            ImageTitle = "Forest fruit"
                        },
                        new
                        {
                            ImageId = 8,
                            ImageName = "cupcakes-oreo.jpg",
                            ImageThumbName = "cupcakes-oreo.jpg",
                            ImageTitle = "Oreo supreme"
                        },
                        new
                        {
                            ImageId = 9,
                            ImageName = "cupcake-lemon.jpg",
                            ImageThumbName = "cupcake-lemon.jpg",
                            ImageTitle = "Lemon"
                        },
                        new
                        {
                            ImageId = 10,
                            ImageName = "cupcake-rainbow.jpg",
                            ImageThumbName = "cupcake-rainbow.jpg",
                            ImageTitle = "Taste the rainbow"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Webshop.Models.CartContent", b =>
                {
                    b.HasOne("Webshop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Webshop.Models.Customer", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Customer")
                        .HasForeignKey("Webshop.Models.Customer", "CustomerId");
                });

            modelBuilder.Entity("Webshop.Models.Order", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Webshop.Models.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId1");
                });

            modelBuilder.Entity("Webshop.Models.OrderDetail", b =>
                {
                    b.HasOne("Webshop.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webshop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Webshop.Models.Product", b =>
                {
                    b.HasOne("Webshop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Webshop.Models.ProductImage", "ProductImage")
                        .WithMany("Products")
                        .HasForeignKey("ProductImageId");
                });

            modelBuilder.Entity("Webshop.Models.ProductCategory", b =>
                {
                    b.HasOne("Webshop.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webshop.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
