// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Webshop.Data;

namespace Webshop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220412161035_new inital database creation")]
    partial class newinitaldatabasecreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "3a1f1eca-4ab8-45e7-99c5-0ac1fae73356",
                            ConcurrencyStamp = "29b515ec-ac6c-4e57-8393-e663a5ec5869",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a16e2917-6951-475c-9616-c9ff11679b90",
                            ConcurrencyStamp = "b04c5a15-0bf2-43bc-bf92-c1b73caf385a",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "d3203281-3f97-4b0f-920e-fd43cca6637a",
                            RoleId = "3a1f1eca-4ab8-45e7-99c5-0ac1fae73356"
                        },
                        new
                        {
                            UserId = "50d3f6df-f9d5-41fb-8d66-4110f64250a0",
                            RoleId = "a16e2917-6951-475c-9616-c9ff11679b90"
                        },
                        new
                        {
                            UserId = "d13a3ff0-9a84-42e2-8bce-98cd6bd96dc2",
                            RoleId = "a16e2917-6951-475c-9616-c9ff11679b90"
                        },
                        new
                        {
                            UserId = "c9be1724-46f3-41e1-afd8-ff3acb9f3603",
                            RoleId = "a16e2917-6951-475c-9616-c9ff11679b90"
                        },
                        new
                        {
                            UserId = "01484be6-e833-4a39-9db8-52e5f9b84e56",
                            RoleId = "a16e2917-6951-475c-9616-c9ff11679b90"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Webshop.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "d3203281-3f97-4b0f-920e-fd43cca6637a",
                            AccessFailedCount = 0,
                            Address = "Adminvägen 1",
                            City = "Admin city",
                            ConcurrencyStamp = "dda1898c-14e6-4036-ad7d-d901d27c27df",
                            Country = "Admin country",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Adminsson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEO06R+IBc5j3z5+O7UJ/+25Rk9TjwLiX/Mnef4/q8C8u2+8ZWz1Z8LKyqUrv0Dg9+A==",
                            PhoneNumber = "123456578",
                            PhoneNumberConfirmed = false,
                            PostalCode = "12345",
                            SecurityStamp = "315b25a5-6477-4de0-bea0-d782a7903d44",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "50d3f6df-f9d5-41fb-8d66-4110f64250a0",
                            AccessFailedCount = 0,
                            Address = "Kanelgatan 3",
                            City = "Visby",
                            ConcurrencyStamp = "8aafa24e-9fb9-4e6b-b1f3-015a1d797405",
                            Country = "Sweden",
                            Email = "customer1@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Arne",
                            LastName = "Karat",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER1@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER1@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQOck5qJO/nF7BuqoTFfVONKyx6smJiNyYOOAT779ASDSNuvp2LMEVxhSOwDGE/wA==",
                            PhoneNumber = "043016624",
                            PhoneNumberConfirmed = false,
                            PostalCode = "23445",
                            SecurityStamp = "8331a3ec-bda0-4b3d-b633-a5616c8aa8b7",
                            TwoFactorEnabled = false,
                            UserName = "customer1@seeduser.com"
                        },
                        new
                        {
                            Id = "d13a3ff0-9a84-42e2-8bce-98cd6bd96dc2",
                            AccessFailedCount = 0,
                            Address = "Rimbo torg 1",
                            City = "Skövde",
                            ConcurrencyStamp = "4604b0a3-5ec3-4ae1-974a-ee6a89848022",
                            Country = "Sweden",
                            Email = "customer2@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Kenneth",
                            LastName = "Svenzon",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER2@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER2@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECwn/dIzERyjOB73KvP+RPPguBqHjC0VL1fV8rhMa2Xw0Lyao9kdRX4Cd0ep2UZTyw==",
                            PhoneNumber = "0721453456",
                            PhoneNumberConfirmed = false,
                            PostalCode = "44565",
                            SecurityStamp = "b999b73d-22f1-4d7c-8b3d-50504e86cb8a",
                            TwoFactorEnabled = false,
                            UserName = "customer2@seeduser.com"
                        },
                        new
                        {
                            Id = "c9be1724-46f3-41e1-afd8-ff3acb9f3603",
                            AccessFailedCount = 0,
                            Address = "Kungsgatan 4",
                            City = "Arboga",
                            ConcurrencyStamp = "11779972-5da7-476d-bce6-5c4a4e2f3622",
                            Country = "Sweden",
                            Email = "customer3@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Angela",
                            LastName = "Melodi",
                            LockoutEnabled = false,
                            NormalizedEmail = "CUSTOMER3@SEEDUSER.COM",
                            NormalizedUserName = "CUSTOMER3@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA061pLol1obtVbb+bTCKstwSZviE8bz4f0yr9XgSyfjYrDYRQc3PNfQFqLfjvAZNw==",
                            PhoneNumber = "0771242424",
                            PhoneNumberConfirmed = false,
                            PostalCode = "32344",
                            SecurityStamp = "7c799b83-9e2a-4c14-a233-2b2b8ded36dd",
                            TwoFactorEnabled = false,
                            UserName = "customer3@seeduser.com"
                        },
                        new
                        {
                            Id = "01484be6-e833-4a39-9db8-52e5f9b84e56",
                            AccessFailedCount = 0,
                            Address = "Royal Carnac Hotel 1",
                            City = "Cairo",
                            ConcurrencyStamp = "bac33314-5020-4bd3-8dbb-86e38da9d1cd",
                            Country = "Egypt",
                            Email = "seeduser@seeduser.com",
                            EmailConfirmed = false,
                            FirstName = "Kaj",
                            LastName = "Fridell",
                            LockoutEnabled = false,
                            NormalizedEmail = "SEEDUSER@SEEDUSER.COM",
                            NormalizedUserName = "SEEDUSER@SEEDUSER.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK6D+aeIpL9w/v0zUrZ7h8bsk+rjuYchgPZQ4QU+jtb8guN2JjLr/c42v1U1uwE72Q==",
                            PhoneNumber = "031184698",
                            PhoneNumberConfirmed = false,
                            PostalCode = "33467",
                            SecurityStamp = "1748b744-7fda-402f-a868-7a6f1967cc59",
                            TwoFactorEnabled = false,
                            UserName = "seeduser@seeduser.com"
                        });
                });

            modelBuilder.Entity("Webshop.Models.CartContent", b =>
                {
                    b.Property<int>("CartContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("CartContentId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartContents");
                });

            modelBuilder.Entity("Webshop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            CategoryName = "Chocolate"
                        },
                        new
                        {
                            Id = 102,
                            CategoryName = "Frosted"
                        },
                        new
                        {
                            Id = 103,
                            CategoryName = "Gluten free"
                        },
                        new
                        {
                            Id = 104,
                            CategoryName = "Berries and fruits"
                        });
                });

            modelBuilder.Entity("Webshop.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Kanelgatan 3",
                            City = "Visby",
                            Country = "Sweden",
                            Email = "bling@gmail.com",
                            FirstName = "Arne",
                            LastName = "Karat",
                            PhoneNumber = "043016624",
                            PostalCode = "23445"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Rimbo torg 1",
                            City = "Skövde",
                            Country = "Sweden",
                            Email = "stekarn@gmail.com",
                            FirstName = "Kenneth",
                            LastName = "Svenzon",
                            PhoneNumber = "0721453456",
                            PostalCode = "44565"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kungsgatan 4",
                            City = "Arboga",
                            Country = "Sweden",
                            Email = "lucky@hotmail.com",
                            FirstName = "Angela",
                            LastName = "Melodi",
                            PhoneNumber = "0771242424",
                            PostalCode = "32344"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Royal Carnac Hotel 1",
                            City = "Cairo",
                            Country = "Egypt",
                            Email = "kafr@egypt.gov",
                            FirstName = "Kaj",
                            LastName = "Fridell",
                            PhoneNumber = "031184698",
                            PostalCode = "33467"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Vedgatan 3",
                            City = "Oslo",
                            Country = "Norway",
                            Email = "tavlan@gmail.com",
                            FirstName = "Molly",
                            LastName = "Sundkvist",
                            PhoneNumber = "0443346723",
                            PostalCode = "46723"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Gatgatan 2",
                            City = "Göteborg",
                            Country = "Sweden",
                            Email = "test@gmail.com",
                            FirstName = "Jan",
                            LastName = "Andersson",
                            PhoneNumber = "04422723",
                            PostalCode = "46723"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Avenyn 1",
                            City = "Berlin",
                            Country = "Germany",
                            Email = "raj@goteborg.se",
                            FirstName = "Sofia",
                            LastName = "Bosch",
                            PhoneNumber = "0543768798",
                            PostalCode = "67823"
                        });
                });

            modelBuilder.Entity("Webshop.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId1");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Webshop.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Webshop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductImageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductImageId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            CategoryId = 101,
                            Description = "A delicious chocolate cupcake with belgian chocolate",
                            Name = "Chocolate Dream",
                            Price = 29,
                            ProductImageId = 1
                        },
                        new
                        {
                            Id = 1002,
                            CategoryId = 102,
                            Description = "A frosted strawberry cupcake, filled with strawberry jam",
                            Name = "Pink surprise",
                            Price = 22
                        },
                        new
                        {
                            Id = 1003,
                            CategoryId = 103,
                            Description = "A gluten free cupcake packed with flavor",
                            Name = "Plain delight",
                            Price = 34
                        },
                        new
                        {
                            Id = 1004,
                            CategoryId = 104,
                            Description = "Filled with peanut butter and topped with delicious peanut frosting.",
                            Name = "Peanut butter cup-cake",
                            Price = 34
                        },
                        new
                        {
                            Id = 1005,
                            CategoryId = 101,
                            Description = "This is the cupcake for you if you like all things Nutella.",
                            Name = "Nutella mountain",
                            Price = 34
                        },
                        new
                        {
                            Id = 1006,
                            CategoryId = 101,
                            Description = "A cupcake made to look like a giant M&M.",
                            Name = "M&M don't sue us",
                            Price = 34
                        },
                        new
                        {
                            Id = 1007,
                            CategoryId = 104,
                            Description = "Not the tea, instead a cupcake with every kind of berry.",
                            Name = "Forest fruit",
                            Price = 34
                        },
                        new
                        {
                            Id = 1008,
                            CategoryId = 101,
                            Description = "Oreo cookie on top as well as batter and frosting made from oreo's.",
                            Name = "Oreo supreme",
                            Price = 34
                        },
                        new
                        {
                            Id = 1009,
                            CategoryId = 104,
                            Description = "If you like something with a fresher taste, this cupcake is for you.",
                            Name = "Lemon",
                            Price = 34
                        },
                        new
                        {
                            Id = 1010,
                            CategoryId = 104,
                            Description = "Every taste of the fruit rainbow you can imagine.",
                            Name = "Taste the rainbow",
                            Price = 34
                        });
                });

            modelBuilder.Entity("Webshop.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Webshop.Models.ProductImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageThumbName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            ImageName = "chokladbild.jpg",
                            ImageThumbName = "chokladbildth.jpg",
                            ImageTitle = "Chocolate Dream"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Webshop.Models.CartContent", b =>
                {
                    b.HasOne("Webshop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Webshop.Models.Customer", b =>
                {
                    b.HasOne("Webshop.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Customer")
                        .HasForeignKey("Webshop.Models.Customer", "CustomerId");
                });

            modelBuilder.Entity("Webshop.Models.Order", b =>
                {
                    b.HasOne("Webshop.Models.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId1");
                });

            modelBuilder.Entity("Webshop.Models.OrderDetail", b =>
                {
                    b.HasOne("Webshop.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webshop.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Webshop.Models.Product", b =>
                {
                    b.HasOne("Webshop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Webshop.Models.ProductImage", "ProductImage")
                        .WithMany("Products")
                        .HasForeignKey("ProductImageId");
                });

            modelBuilder.Entity("Webshop.Models.ProductCategory", b =>
                {
                    b.HasOne("Webshop.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Webshop.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
